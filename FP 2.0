data_1 <- read.csv(file = "Specimen_RawData_7.csv", header = TRUE, stringsAsFactors = FALSE, skip = 5)
names(data_1)<-c("time", "extension", "load")


#PeaksAndValleys: creates list of all points that are peaks or valleys. The list will alternate between peak and valley.

PeaksAndValleys<-function(points){
	
	PV<-data.frame(time=c(0), load=c(0))
	y1<-NULL
	y2<-NULL
	y3<-NULL
	for(i in 2:(length(points$time)-1)){
		y1<-points$load[i-1]
		y2<-points$load[i]
		y3<-points$load[i+1]
		if ((y2>=y1&y2>=y3) | (y2<=y1&y2<=y3)){
			if(PV$load[1]==0){
				PV$time[1]<-points$time[i]
				PV$load[1]<-y2
			}else{
				PV<-rbind(PV, data.frame(time=points$time[i], load=y2))
			}
		}
	}
	return(PV)	
}

test1<-PeaksAndValleys(data_1)
plot(data_1$load~data_1$time, pch=".", cex=1.5)
points(test1$load~test1$time, pch=16, col="red")


FindPeaks<-function(points, magslope=0.05){
	
	peaks<-data.frame(Ptime=c(0), Pload=c(0), Vtime=c(0), Vload=c(0), yDelta=c(0))
	y1<-NULL
	y2<-NULL
	x1<-NULL
	x2<-NULL

	for(i in 1:(length(points$time)-1)){
		y1<-points$load[i]
		y2<-points$load[i+1]
		x1<-points$time[i]
		x2<-points$time[i+1]
		if ((abs(y2-y1)/(x2-x1))>=magslope){
			if(peaks$Pload[1]==0){
				peaks$Ptime[1]<-x1
				peaks$Pload[1]<-y1
				peaks$Vtime[1]<-x2
				peaks$Vload[1]<-y2
				yDelta<-y1-y2
			}else{
				peaks<-rbind(peaks, data.frame(Ptime=x2, Pload=y1, Vtime=x2, Vload=y2, yDelta=y1-y2))
			}
		}
	}
	return(peaks)	
}
